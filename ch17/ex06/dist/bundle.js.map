{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,sBAAsB,YAAY;AAClC,0BAA0B,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACN6C;AACA;;AAE7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA,IAAI,0DAAU;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA,WAAW,0DAAU;AACrB,IAAI,0DAAU;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,0DAAU","sources":["webpack:///./src/updateGrid.js","webpack:///./src/renderGrid.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/index.js"],"sourcesContent":["// Life Game のルールに従ってセルを更新する\n\n// 50 x 50 の盤面とする\nconst ROWS = 50;\nconst COLS = 50;\n// 1セルのサイズ\nconst RESOLUTION = 10;\n\nexport function updateGrid(grid) {\n    // 新しいグリッドを作成\n    const nextGrid = grid.map((arr) => [...arr]);\n\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            // 周囲のセルの生存数を数えて nextGrid[row][col] に true or false を設定する (実装してね)\n            let neighbors = [];\n            if (row === 0 || row === ROWS - 1 || col === 0 || col === COLS - 1) {\n                // 四角\n                if (row === 0 && col === 0) {\n                    neighbors = [grid[row][col + 1], grid[row + 1][col], grid[row + 1][col + 1]];\n                }\n                else if (row === 0 && col === COLS - 1) {\n                    neighbors = [grid[row][col - 1], grid[row + 1][col - 1], grid[row + 1][col]];\n                }\n                else if (row === ROWS - 1 && col === 0) {\n                    neighbors = [grid[row - 1][col], grid[row - 1][col + 1], grid[row][col + 1]];\n                }\n                else if (row === ROWS - 1 && col === COLS - 1) {\n                    neighbors = [grid[row - 1][col - 1], grid[row - 1][col], grid[row][col - 1]];\n                }\n                else if (row === 0) {\n                    neighbors = [grid[row][col - 1], grid[row][col + 1], grid[row + 1][col - 1], grid[row + 1][col], grid[row + 1][col + 1]];\n                }\n                else if (row === ROWS - 1) {\n                    neighbors = [grid[row - 1][col - 1], grid[row - 1][col], grid[row - 1][col + 1], grid[row][col - 1], grid[row][col + 1]];\n                }\n                else if (col === 0) {\n                    neighbors = [grid[row - 1][col], grid[row - 1][col + 1], grid[row][col + 1], grid[row + 1][col], grid[row + 1][col + 1]];\n                }\n                else if (col === COLS - 1) {\n                    neighbors = [grid[row - 1][col - 1], grid[row - 1][col], grid[row][col - 1], grid[row + 1][col - 1], grid[row + 1][col]];\n                }\n            }\n            else {\n                neighbors = [grid[row - 1][col - 1], grid[row - 1][col], grid[row - 1][col + 1], grid[row][col - 1], grid[row][col + 1], grid[row + 1][col - 1], grid[row + 1][col], grid[row + 1][col + 1]];\n            }\n            // trueを数える\n            let alive = neighbors.filter((cell) => cell).length;\n\n            if (alive === 3) {\n                nextGrid[row][col] = true;\n            } else if (alive < 2 || alive > 3) {\n                nextGrid[row][col] = false;\n            } else {\n                nextGrid[row][col] = grid[row][col];\n            }\n\n        }\n    }\n    return nextGrid;\n}","// grid を canvas に描画する\n// 50 x 50 の盤面とする\nconst ROWS = 50;\nconst COLS = 50;\n// 1セルのサイズ\nconst RESOLUTION = 10;\nconst canvas = document.querySelector(\"#screen\");\nconst ctx = canvas.getContext(\"2d\");\n\nexport function renderGrid(grid) {\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            const cell = grid[row][col];\n            ctx.beginPath();\n            ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\n            ctx.fillStyle = cell ? \"black\" : \"white\";\n            ctx.fill();\n            ctx.stroke();\n        }\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { updateGrid } from \"./updateGrid.js\";\nimport { renderGrid } from \"./renderGrid.js\";\n\n// 50 x 50 の盤面とする\nconst ROWS = 50;\nconst COLS = 50;\n// 1セルのサイズ\nconst RESOLUTION = 10;\n\nconst canvas = document.querySelector(\"#screen\");\nconst ctx = canvas.getContext(\"2d\");\nconst startButton = document.querySelector(\"#start\");\nconst pauseButton = document.querySelector(\"#pause\");\n\ncanvas.width = ROWS * RESOLUTION;\ncanvas.height = COLS * RESOLUTION;\n\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\nlet animationId = null;\n\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\nconst sound = new Audio(\"./decision1.mp3\");\n\n// ライフゲームのセル (true or false) をランダムに初期化する\nlet grid = new Array(ROWS)\n    .fill(null)\n    .map(() =>\n        new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2))\n    );\n\n\n// canvas がクリックされたときの処理 (セルの値を反転する)\ncanvas.addEventListener(\"click\", function (evt) {\n    const rect = canvas.getBoundingClientRect();\n    const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\n\n    const row = Math.floor(pos.y / RESOLUTION);\n    const col = Math.floor(pos.x / RESOLUTION);\n    grid[row][col] = !grid[row][col];\n    sound.cloneNode().play();\n    renderGrid(grid);\n});\n\n// requestAnimationFrame によって一定間隔で更新・描画を行う\n// NOTE: リフレッシュレートの高い画面では速く実行される (これを防ぐ場合は下記の例を参照)\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame\nfunction update() {\n    grid = updateGrid(grid);\n    renderGrid(grid);\n    animationId = requestAnimationFrame(update);\n}\n\nstartButton.addEventListener(\"click\", () => {\n    // 既にアニメーションが動いている場合は何もしない\n    if (animationId) {\n        return;\n    }\n    update();\n});\n\npauseButton.addEventListener(\"click\", () => {\n    // アニメーションが停止している場合は何もしない\n    if (!animationId) {\n        return;\n    }\n    cancelAnimationFrame(animationId);\n    animationId = null;\n});\n\nrenderGrid(grid);\n"],"names":[],"sourceRoot":""}